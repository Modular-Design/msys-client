import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/building_java_projects.html
 */

/*
 * Build Processor for JavaFX:
 *
 * https://openjfx.io/openjfx-docs/#gradle
 * https://github.com/brunoborges/javafx-jlink-starter-gradle
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.beryx.jlink' version '2.24.0'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}


// Application Configuration
ext {
    appName = "MSYS Client"
    appLauncher = "msys.client"
    appPackaging = "msys"
    appModuleName = "msys.client"
    appMainClass = "msys.client.App"
}

//
version = '0.0.1'
mainClassName = "${ext.appModuleName}/${ext.appMainClass}" // ${ext.appModuleName}/
def javaFXPlatform = getJavaFXPlatform()
def javaFXVersion = "16"

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    //
    implementation "org.java-websocket:Java-WebSocket:1.5.1"

    implementation "org.openjfx:javafx-base:${javaFXVersion}:${javaFXPlatform}"
    implementation "org.openjfx:javafx-controls:${javaFXVersion}:${javaFXPlatform}"
    implementation "org.openjfx:javafx-graphics:${javaFXVersion}:${javaFXPlatform}"

    //jlink
    implementation 'org.kordamp.ikonli:ikonli-javafx:11.1.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.1.0'
}


application {
    mainModule.set(appModuleName)
    mainClass.set(appMainClass)
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javaFXPlatform}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }
}

javafx {
    modules = [ 'javafx.controls' ]
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

private static String getJavaFXPlatform() {
    def currentOS = DefaultNativePlatform.currentOperatingSystem
    if (currentOS.isWindows()) {
        return 'win'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'mac'
    }
    return null
}

wrapper{
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion  = "7.0.2"
}

configurations {
    testCompile
}