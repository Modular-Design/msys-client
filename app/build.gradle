/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.2/userguide/building_java_projects.html
 */

/*
 * Build Processor for JavaFX:
 *
 * https://openjfx.io/openjfx-docs/#gradle
 * https://github.com/brunoborges/javafx-jlink-starter-gradle
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.23.1'
}


// Application Configuration
ext {
    appName = "MSYS Client"
    appLauncher = "msys"
    appPackaging = "msys"
    appModuleName = "msys"
    appMainClass = "msys.client.App"
}

//
version = '0.0.1'
mainClassName = "${ext.appMainClass}" // ${ext.appModuleName}/
targetCompatibility = '15'
sourceCompatibility  = '15'

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:29.0-jre'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'javax.websocket:javax.websocket-all:1.1'
    //implementation 'javax.websocket:javax.websocket-client-api:1.1'
    implementation group: 'org.glassfish.tyrus.bundles', name: 'tyrus-standalone-client', version: '1.9'

    implementation group: 'org.openjfx', name: 'javafx-controls', version: '16'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '16'

    //jlink
    implementation 'org.kordamp.ikonli:ikonli-javafx:11.1.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.1.0'
}

javafx {
    version = "16"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    mainModule = appModuleName
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
    }
}

jar {
    manifest {
        attributes["Main-Class"] = appMainClass
    }
}


task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

if (project.hasProperty('debugRun') && project.debugRun as boolean) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}
